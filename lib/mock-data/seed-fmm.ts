/**
 * FMM Company Database Seeder
 *
 * This script seeds the database with real FMM company data
 * scraped from the Federation of Malaysian Manufacturers website.
 *
 * Usage:
 *   1. Scrape FMM data: cd scripts/scraper && npm run scrape:all
 *   2. Transform data: cd scripts/scraper && npm run transform
 *   3. Seed database: This will import from fmm-companies-scraped.ts
 */

import { supabase } from '@/lib/supabase/client';

/**
 * Import scraped FMM companies
 * Note: This file is auto-generated by the scraper transform script
 */
let FMM_COMPANIES_SCRAPED: any[] = [];

try {
  const scrapedData = await import('./fmm-companies-scraped');
  FMM_COMPANIES_SCRAPED = scrapedData.FMM_COMPANIES_SCRAPED || [];
} catch (error) {
  console.warn('⚠️  Scraped FMM data not found. Run scraper first.');
  console.log('   1. cd scripts/scraper');
  console.log('   2. npm run scrape:all');
  console.log('   3. npm run transform');
}

/**
 * Seed FMM companies into database
 */
export async function seedFMMCompanies() {
  console.log('🏢 Seeding FMM Companies...\n');

  if (FMM_COMPANIES_SCRAPED.length === 0) {
    console.log('⚠️  No scraped FMM data available. Using fallback data...');
    return {
      success: false,
      message: 'No scraped data available. Please run the scraper first.'
    };
  }

  try {
    // Transform scraped data to match database schema
    const companiesToInsert = FMM_COMPANIES_SCRAPED.map(company => ({
      name: company.name,
      country: company.country,
      type: company.type,
      sector: company.sector
      // Note: Additional fields like address, phone, website can be stored in metadata
      // if you extend the companies table schema
    }));

    console.log(`📊 Preparing to insert ${companiesToInsert.length} companies...`);

    // Insert in batches to avoid payload limits
    const batchSize = 100;
    let totalInserted = 0;
    let errors = 0;

    for (let i = 0; i < companiesToInsert.length; i += batchSize) {
      const batch = companiesToInsert.slice(i, i + batchSize);
      const batchNum = Math.floor(i / batchSize) + 1;
      const totalBatches = Math.ceil(companiesToInsert.length / batchSize);

      console.log(`   Batch ${batchNum}/${totalBatches}: Inserting ${batch.length} companies...`);

      const { data, error } = await supabase
        .from('companies')
        .insert(batch)
        .select();

      if (error) {
        console.error(`   ❌ Error in batch ${batchNum}:`, error.message);
        errors++;
      } else {
        totalInserted += data?.length || 0;
        console.log(`   ✅ Batch ${batchNum}: Inserted ${data?.length} companies`);
      }
    }

    console.log('\n' + '='.repeat(70));
    console.log('📊 FMM COMPANIES SEEDING SUMMARY');
    console.log('='.repeat(70));
    console.log(`Total companies processed: ${companiesToInsert.length}`);
    console.log(`Successfully inserted: ${totalInserted}`);
    console.log(`Errors: ${errors}`);
    console.log('='.repeat(70) + '\n');

    return {
      success: true,
      totalProcessed: companiesToInsert.length,
      totalInserted: totalInserted,
      errors: errors
    };

  } catch (error) {
    console.error('❌ Fatal error seeding FMM companies:', error);
    return {
      success: false,
      error: error
    };
  }
}

/**
 * Get statistics about scraped FMM data
 */
export function getFMMStats() {
  if (FMM_COMPANIES_SCRAPED.length === 0) {
    return null;
  }

  const stats = {
    total: FMM_COMPANIES_SCRAPED.length,
    bySector: {} as Record<string, number>,
    byType: {} as Record<string, number>,
    byState: {} as Record<string, number>,
    dataCompleteness: {
      withWebsite: 0,
      withEmail: 0,
      withPhone: 0,
      withAddress: 0
    }
  };

  FMM_COMPANIES_SCRAPED.forEach(company => {
    // Count by sector
    stats.bySector[company.sector] = (stats.bySector[company.sector] || 0) + 1;

    // Count by type
    stats.byType[company.type] = (stats.byType[company.type] || 0) + 1;

    // Count by state
    if (company.state) {
      stats.byState[company.state] = (stats.byState[company.state] || 0) + 1;
    }

    // Data completeness
    if (company.website) stats.dataCompleteness.withWebsite++;
    if (company.email) stats.dataCompleteness.withEmail++;
    if (company.telephone) stats.dataCompleteness.withPhone++;
    if (company.address) stats.dataCompleteness.withAddress++;
  });

  return stats;
}

/**
 * Print FMM data statistics
 */
export function printFMMStats() {
  const stats = getFMMStats();

  if (!stats) {
    console.log('No FMM data available.');
    return;
  }

  console.log('\n' + '='.repeat(70));
  console.log('📊 FMM SCRAPED DATA STATISTICS');
  console.log('='.repeat(70));
  console.log(`Total companies: ${stats.total}\n`);

  console.log('By Sector:');
  Object.entries(stats.bySector)
    .sort((a, b) => b[1] - a[1])
    .forEach(([sector, count]) => {
      const percentage = ((count / stats.total) * 100).toFixed(1);
      console.log(`  ${sector}: ${count} (${percentage}%)`);
    });

  console.log('\nBy Type:');
  Object.entries(stats.byType).forEach(([type, count]) => {
    const percentage = ((count / stats.total) * 100).toFixed(1);
    console.log(`  ${type}: ${count} (${percentage}%)`);
  });

  console.log('\nData Completeness:');
  console.log(`  With website: ${stats.dataCompleteness.withWebsite} (${((stats.dataCompleteness.withWebsite/stats.total)*100).toFixed(1)}%)`);
  console.log(`  With email: ${stats.dataCompleteness.withEmail} (${((stats.dataCompleteness.withEmail/stats.total)*100).toFixed(1)}%)`);
  console.log(`  With phone: ${stats.dataCompleteness.withPhone} (${((stats.dataCompleteness.withPhone/stats.total)*100).toFixed(1)}%)`);
  console.log(`  With address: ${stats.dataCompleteness.withAddress} (${((stats.dataCompleteness.withAddress/stats.total)*100).toFixed(1)}%)`);

  console.log('='.repeat(70) + '\n');
}
